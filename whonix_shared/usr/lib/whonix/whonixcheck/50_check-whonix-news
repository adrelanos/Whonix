#!/bin/bash

download_whonix_news() {
   trap "error_handler" ERR

   SOCKS_PORT_WHONIX_NEWS="9114"

   local MSG="Whonix News Download: Checking for Whonix news and updates..."
   $output ${output_opts[@]} --channel "echo" --type "--info" --title "$TITLE" --message "$MSG"
   
   mkdir --parents ""$VERIFY_TEMPDIR"/news"
   
   declare -A -g WHONIX_NEWS_LINK_LIST
   declare -A -g DOWNLOAD_NEWS_RETURN
   declare -A -g NEWS_VERIFY_RETURN
   
   WHONIX_NEWS_LINK_LIST["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_valid_build_versions.asc/download"]="whonix_news_valid_build_versions.asc"
   WHONIX_NEWS_LINK_LIST["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_valid_deb_versions.asc/download"]="whonix_news_valid_deb_versions.asc"
   WHONIX_NEWS_LINK_LIST["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_"$WHONIX_BUILD_VERSION"_build_news.asc/download"]="whonix_news_"$WHONIX_BUILD_VERSION"_build_news.asc"
   WHONIX_NEWS_LINK_LIST["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_"$INSTALLED_WHONIX_VERSION"_deb_news.asc/download"]="whonix_news_"$INSTALLED_WHONIX_VERSION"_deb_news.asc"   

   ## sf.net does not support ssl.
   ## --location is required since sf.net uses redirects to mirrors.
   
   for LINK in "${!WHONIX_NEWS_LINK_LIST[@]}"; do
      FILENAME="${WHONIX_NEWS_LINK_LIST[$LINK]}"

      true "link: $LINK"
      true "filename: $FILENAME"

      DOWNLOAD_NEWS_RETURN[$LINK]="0"

      $CURL \
         $CURL_VERBOSE \
         --fail \
         --socks5-hostname socks5h://"$GATEWAY_IP":"$SOCKS_PORT_WHONIX_NEWS"/ \
         --location \
         --max-time 180 \
         --output ""$VERIFY_TEMPDIR"/news/"$FILENAME"" \
         "$LINK" \
         &

      wait "$!" || { DOWNLOAD_NEWS_RETURN[$LINK]="$?" ; true; };

      if [ ! "${DOWNLOAD_NEWS_RETURN[$LINK]}" = "0" ]; then
         local MSG="Whonix News Result: Could not download Whonix News File "$FILENAME". (curl return code: "${DOWNLOAD_NEWS_RETURN[$LINK]}")"
         $output ${output_opts[@]} --channel "both" --type "--error" --title "$TITLE" --message "$MSG"
      fi
   
   done
   
   verify_whonix_news
   check_whonix_debian_version
   check_whonix_build_version
   check_whonix_debian_news
   check_whonix_build_news
}

verify_whonix_news() {
   trap "error_handler" ERR

   NEWS_VERIFY_RETURN_GENERAL="0"
   
   true "a NEWS_VERIFY_RETURN_GENERAL: $NEWS_VERIFY_RETURN_GENERAL"

   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --fingerprint \
      >/dev/null 2>/dev/null \
      || { NEWS_VERIFY_RETURN_GENERAL="$?" ; true; };

   true "b NEWS_VERIFY_RETURN_GENERAL: $NEWS_VERIFY_RETURN_GENERAL"
      
   gpg \
      --homedir "$VERIFY_TEMPDIR" \
      --import /usr/share/whonix/keys/whonix-keys.d/* \
      2>/dev/null \
      || { NEWS_VERIFY_RETURN_GENERAL="$?" ; true; };
      
   true "c NEWS_VERIFY_RETURN_GENERAL: $NEWS_VERIFY_RETURN_GENERAL"
   
   if [ ! "$NEWS_VERIFY_RETURN_GENERAL" = "0" ]; then
      local MSG="Whonix News Download Result:
General Whonix News OpenPGP Verification Error. Please report this bug!"
         $output ${output_opts[@]} --channel "both" --type "--error" --title "$TITLE" --message "$MSG"
      return 0
   fi

   for LINK in "${!WHONIX_NEWS_LINK_LIST[@]}"; do
      FILENAME="${WHONIX_NEWS_LINK_LIST[$LINK]}"
      base_name="$(basename "$FILENAME" ".asc")"
      
      ## If news could not be downloaded, do not try to verify it.
      if [ ! "${DOWNLOAD_NEWS_RETURN[$LINK]}" = "0" ]; then
         continue
      fi      
      
      NEWS_VERIFY_RETURN[$LINK]="0"
      
      true "d NEWS_VERIFY_RETURN[$LINK]: ${NEWS_VERIFY_RETURN[$LINK]}"
     
      gpg \
         --homedir "$VERIFY_TEMPDIR" \
         --output ""$VERIFY_TEMPDIR"/news/"$base_name"" \
         --decrypt ""$VERIFY_TEMPDIR"/news/"$FILENAME"" \
         2>/dev/null \
         || { NEWS_VERIFY_RETURN[$LINK]="$?" ; true; };
         
      true "e NEWS_VERIFY_RETURN[$LINK]: ${NEWS_VERIFY_RETURN[$LINK]}"         

      if [ "${NEWS_VERIFY_RETURN[$LINK]}" = "0" ]; then
         local MSG="Whonix News Download: Successfully verified "$FILENAME" via OpenPGP."
         $output ${output_opts[@]} --channel "debug" --type "--info" --title "$TITLE" --message "$MSG"
      else
         local MSG="Whonix News Download Result:
Could not OpenPGP verify authenticity of Whonix News "$FILENAME"!!!
(gpg return code: "${NEWS_VERIFY_RETURN[$LINK]}")
This is either a Whonix Bug or an attack on Whonix!!!"
         $output ${output_opts[@]} --channel "both" --type "--error" --title "$TITLE" --message "$MSG"
      fi
   done
}

check_whonix_debian_version() {
   trap "error_handler" ERR
   
   if [ ! "$NEWS_VERIFY_RETURN_GENERAL" = "0" ]; then
      return 0
   fi   

   ## If news could not be downloaded, do not check Whonix version.
   if [ ! "${DOWNLOAD_NEWS_RETURN["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_valid_deb_versions.asc/download"]}" = "0" ]; then
      return 0
   fi
   
   ## If news verification failed, do not check Whonix version.
   if [ ! "${NEWS_VERIFY_RETURN["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_valid_deb_versions.asc/download"]}" = "0" ]; then
      return 0
   fi
   
   local outdated_deb="1"

   while read LINE; do
      #true "$i: $LINE"
      if [ "$INSTALLED_WHONIX_VERSION" = "$LINE" ]; then
         outdated_deb="0"
      fi
   done < ""$VERIFY_TEMPDIR"/news/whonix_news_valid_deb_versions"

   if [ "$outdated_deb" = "0" ]; then
      ## Up to date...
      local MSG="Whonix News Download Result: Installed Whonix Debian Package $INSTALLED_WHONIX_VERSION is up to date."
      $output ${output_opts[@]} --channel "both" --type "--info" --title "$TITLE" --message "$MSG"
   else
      ## Outdated...
      local MSG="Whonix News Download Result:
Installed Whonix Debian Package $INSTALLED_WHONIX_VERSION is outdated! You can automatically update using Whonix's internal updater. Please update using:
sudo apt-get update && sudo apt-get dist-upgrade"
      $output ${output_opts[@]} --channel "both" --type "--error" --title "$TITLE" --message "$MSG"
   fi
}

check_whonix_build_version() {
   trap "error_handler" ERR
   
   if [ ! "$NEWS_VERIFY_RETURN_GENERAL" = "0" ]; then
      return 0
   fi   

   ## If news could not be downloaded, do not check Whonix version.
   if [ ! "${DOWNLOAD_NEWS_RETURN["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_valid_build_versions.asc/download"]}" = "0" ]; then
      return 0
   fi
   
   ## If news verification failed, do not check Whonix version.
   if [ ! "${NEWS_VERIFY_RETURN["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_valid_build_versions.asc/download"]}" = "0" ]; then
      return 0
   fi   
   
   local outdated_build="1"
   
   while read LINE; do
      #true "$i: $LINE"
      if [ "$WHONIX_BUILD_VERSION" = "$LINE" ]; then
         outdated_build="0"
      fi
   done < ""$VERIFY_TEMPDIR"/news/whonix_news_valid_build_versions"

   if [ "$outdated_build" = "0" ]; then
      ## Up to date...
      local MSG="Whonix News Download Result: Installed Whonix Build $WHONIX_BUILD_VERSION is up to date."
      $output ${output_opts[@]} --channel "both" --type "--info" --title "$TITLE" --message "$MSG"
   else
      ## Outdated...
      local MSG="Whonix News Download Result:
Whonix Build $WHONIX_BUILD_VERSION is outdated!
Sorry, automatically updating this Whonix version is not possible. You have to manually download a new Whonix image."
      $output ${output_opts[@]} --channel "both" --type "--error" --title "$TITLE" --message "$MSG"
   fi
}

check_whonix_debian_news() {
   trap "error_handler" ERR
   
   if [ ! "$NEWS_VERIFY_RETURN_GENERAL" = "0" ]; then
      return 0
   fi   

   ## If news could not be downloaded, do not check Whonix news.
   if [ ! "${DOWNLOAD_NEWS_RETURN["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_"$INSTALLED_WHONIX_VERSION"_deb_news.asc/download"]}" = "0" ]; then
      return 0
   fi
   
   ## If news verification failed, do not check Whonix news.
   if [ ! "${NEWS_VERIFY_RETURN["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_"$INSTALLED_WHONIX_VERSION"_deb_news.asc/download"]}" = "0" ]; then
      return 0
   fi

   local MSG="$(cat ""$VERIFY_TEMPDIR"/news/whonix_news_"$INSTALLED_WHONIX_VERSION"_deb_news")"
   
   if [ "$MSG" = "" ]; then
      true
   else
      $output ${output_opts[@]} --channel "both" --type "--info" --title "$TITLE" --message "$MSG"
   fi
}

check_whonix_build_news() {
   if [ ! "$NEWS_VERIFY_RETURN_GENERAL" = "0" ]; then
      return 0
   fi   

   ## If news could not be downloaded, do not check Whonix news.
   if [ ! "${DOWNLOAD_NEWS_RETURN["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_"$WHONIX_BUILD_VERSION"_build_news.asc/download"]}" = "0" ]; then
      return 0
   fi
   
   ## If news verification failed, do not check Whonix news.
   if [ ! "${NEWS_VERIFY_RETURN["http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news/whonix_news_"$WHONIX_BUILD_VERSION"_build_news.asc/download"]}" = "0" ]; then
      return 0
   fi

   local MSG="$(cat ""$VERIFY_TEMPDIR"/news/whonix_news_"$WHONIX_BUILD_VERSION"_build_news")"   
   
   if [ "$MSG" = "" ]; then
      true
   else
      $output ${output_opts[@]} --channel "both" --type "--info" --title "$TITLE" --message "$MSG"
   fi
}


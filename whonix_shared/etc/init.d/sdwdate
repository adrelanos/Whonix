#! /bin/sh
### BEGIN INIT INFO
# Provides:          sdwdate
# Required-Start:    mountkernfs $local_fs $remote_fs $syslog $network bootclockrandomization
# Required-Stop:     $remote_fs $local_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Set time using sdwdate
# Description:       Set time using sdwdate
### END INIT INFO

#set -x

DESC="Setting time using sdwdate"
NAME=sdwdate
SCRIPTNAME=/etc/init.d/$NAME
SDW_DIR=/var/run/$NAME
PIDFILE=$SDW_DIR/pid
SDW_DONE_FILE=$SDW_DIR/done
SDW_SUCCESS_FILE=$SDW_DIR/success
LOG=/var/log/$NAME.log

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# Create status directory and log file
install -o root -g root -m 0755 -d ${SDW_DIR}
install -o sdw -g nogroup -m 0644 /dev/null ${LOG}

log() {
	echo "$@" >> "${LOG}"
}

do_start() {
	## Does not work: /usr/sbin/VBoxService --disable-timesync || true
	
	echo "\
INFO: Whonix /etc/init.d/timesync
      Running: service virtualbox-guest-utils stop 2>/dev/null || true
      Only in case guest additions are installed.
      Should only deactivate time sync.
      Bug report:
          https://www.virtualbox.org/ticket/10828      
      Details:
          https://www.whonix.org/wiki/Dev/TimeSync"

	## Ubuntu:
	service vboxadd-service stop 2>/dev/null || true

	## Debian
	service virtualbox-guest-utils stop 2>/dev/null || true

	if [ -e "$SDW_DONE_FILE" ]; then
		rm -f "$SDW_DONE_FILE"
	fi

	if [ -e "$SDW_SUCCESS_FILE" ]; then
		rm -f "$SDW_SUCCESS_FILE"
	fi

	start-stop-daemon \
	   --start \
	   --pidfile "$PIDFILE" \
	   --make-pidfile \
	   --background \
	   --exec /usr/bin/sdwdate --

	return $?
}

do_stop() {
	start-stop-daemon \
	   --stop \
	   --quiet \
	   --pidfile "$PIDFILE" \
	   2> /dev/null

	if [ -e "$PIDFILE" ]; then
		rm -f "$PIDFILE"
	fi	   

	if [ -e "$SDW_DONE_FILE" ]; then
		rm -f "$SDW_DONE_FILE"
	fi

	if [ -e "$SDW_SUCCESS_FILE" ]; then
		rm -f "$SDW_SUCCESS_FILE"
	fi
}

do_status() {
   if [ -e "$PIDFILE" ]; then
      return 0
   else
      return 1
   fi
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "$DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	do_stop
	;;
  restart)
	do_stop
	do_start
	;;
  force-reload)
	do_stop
	do_start
	;;
  status)
        do_status
        exit $?
	;;
  *)
	echo "Usage: $SCRIPTNAME (start|stop|restart|force-reload|status)" >&2
	exit 3
	;;
esac

:

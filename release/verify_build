#!/bin/bash

set -x

MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "$MYDIR"
cd ..

cd help-steps
source pre
source variables

## Related links:
## - https://wiki.debian.org/SecureApt#How_to_manually_check_for_package.27s_integrity

## TODO:
## - This is a work in progress.
## - Mismatch variable. Default 0 and set to 1 if a single mismatching file was found.
## - Some TODOs below need to activated.
## - dpkg diverted (symlinked) files may be an issue and may need to be followed.
## - Other symlinked files may be an issue.
## - Code from build-steps.d/2100_verify-files should be reused to check scripts and config files shipped by Whonix source code.
## - We could verify files in /var/cache/apt/archives, but this is probably not necessary since we could also use apt-get autoclean
##   to get rid of those packages before creating an image.
## - Check the dpkg status file if it contains all packages their dependencies of those as claimed
##   in <whonix source code>/debian/control.

## TODO lower priority:
## - Older packages can still be downloaded http://snapshot.debian.org/. Use it so verification still works long time after release.
## - /home/user/whonix_binary/verification/Whonix-Workstation.ovf has to be manually audited.

## TODO: Read which version to check or filename from command line?
WHONIX_BUILD_WHONIX_VERSION_NEW="0.5.6"

WHONIX_BUILD_VERIFY_OLD_PWD="$(pwd)"

## Default to "no mismatch found" (0) and set to "mismatch found" (1) as soon we catch a single one.
WHONIX_BUILD_VERIFY_MISMATCH="0"

TEMP_FOLDER=""$WHONIX_BINARY"/verification"
sudo -u "$USERNAME" mkdir --parents "$TEMP_FOLDER"
cd "$TEMP_FOLDER"

declare -A -g remembered_file

declare -A -g pkg_name
declare -A -g pkg_vers_with
declare -A -g pkg_vers_without
declare -A -g pkg_arch

if [ -f ""$TEMP_FOLDER"/"$VMNAME".img" ]; then
   ## Unpacking not required, skipping.
   true
else
   if [ ! -f ""$WHONIX_BINARY"/"$VMNAME"-"$WHONIX_BUILD_WHONIX_VERSION_NEW".ova" ]; then
      ## Unpack .ova.
      error "${red}${bold}ERROR: ""$WHONIX_BINARY"/"$VMNAME"-"$WHONIX_BUILD_WHONIX_VERSION_NEW".ova" does not exist. ${reset}"
   else
      sudo -u "$USERNAME" tar -xvf ""$WHONIX_BINARY"/"$VMNAME"-"$WHONIX_BUILD_WHONIX_VERSION_NEW".ova"
   fi
fi

if [ ! -f ""$TEMP_FOLDER"/"$VMNAME"-disk1.vmdk" ]; then
   error "${red}${bold}ERROR: "$TEMP_FOLDER"/"$VMNAME"-disk1.vmdk does not exist. ${reset}"
fi

## export, so help-steps/(un)mount-img opens this one.
export WHONIX_BUILD_MOUNT_IMG_FILE=""$TEMP_FOLDER"/"$VMNAME".img"

if [ -f "$WHONIX_BUILD_MOUNT_IMG_FILE" ]; then
   ## Converting .vmdk to .img not required, skipping.
   true
else
   ## Convert .vmdk to .img, since there is no Free Software for mounting .vmdk using command line.
   sudo -u "$USERNAME" qemu-img convert ""$TEMP_FOLDER"/"$VMNAME"-disk1.vmdk" -O raw "$WHONIX_BUILD_MOUNT_IMG_FILE"
fi

error_handler_unmount_verify_build() {
   ## Get out of this folder, so unmounting will work.
   cd "$WHONIX_BUILD_VERIFY_OLD_PWD"
   
   error_handler_unmount
}

trap "error_handler_unmount_verify_build" ERR INT TERM

## TODO: Remove
"$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-img || true

## Mount "$TEMP_FOLDER"/"$VMNAME".img
"$WHONIX_SOURCE_HELP_STEPS_FOLDER"/mount-img

## archive keyring
gpg \
   --fingerprint \
   --no-default-keyring \
   --keyring \
   /etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg

## verify Packages file against archive keyring
## TODO: Get rid of || true. The file seems to be signed with two keys, but one is missing.
gpg \
   --verify \
   --no-default-keyring \
   --keyring \
   /etc/apt/trusted.gpg.d/debian-archive-wheezy-automatic.gpg \
   /var/lib/apt/lists/ftp.us.debian.org_debian_dists_testing_InRelease || true

## Print the md5sum of the Packages file which is listed in the Release file.
## TODO: Is this required?
#sed -n "s,main/binary-i386/Packages$,,p" /var/lib/apt/lists/ftp.us.debian.org_debian_dists_testing_InRelease

## Print the md5sum of the Packages file itself.
## TODO: Is this required?
#md5sum /var/lib/apt/lists/ftp.us.debian.org_debian_dists_testing_main_binary-i386_Packages
## should work as well:
#sha1sum
#sha256sum

## Enable apt-cacher-ng.
export http_proxy="http://127.0.0.1:3142"

## TODO: Fails with Whonix apt repository enabled, because of apt-cacher-ng. Contacted author.
#apt-get update
   
## Disable apt-cacher-ng.
export unset http_proxy

verify_whonix_source_files_helper() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   for i in $(find "$1"); do
      if [ -d "$i" ]; then
         continue
      fi
      if [ "$(basename "$i")" = ".directory" ]; then
         echo "${bold}${cyan}INFO: skipping to diff $i. ${reset}"
         continue
      fi
      local temp="${i#"$1"}"
      local tmp="/"$temp""
      local chroot_file="$CHROOT_FOLDER"/"$temp"
      
      echo "${cyan}INFO${reset}: Diffing original "$i" with "$chroot_file"..."
      echo "${cyan}INFO${reset}: tmp: $tmp"
      
      local diff_return="0"
      diff "$i" "$chroot_file" || { local diff_return="$?"; true; };

      if [ "$diff_return" = "0" ]; then
         remembered_file["$tmp"]="0"
      else
         echo "${red}${bold}ERROR: Diff returned "$diff_return" for "$chroot_file"...${reset}"
         WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
         remembered_file["$tmp"]="1"
      fi
   done
}

verify_whonix_source_files() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   ## Setting +x because the for loops otherwise causes too much output.
   set +x

   if [ "$WHONIX_BUILD_GATEWAY" = "1" ]; then
      verify_whonix_source_files_helper "$WHONIX_SOURCE_FOLDER/whonix_gateway/"
      verify_whonix_source_files_helper "$WHONIX_SOURCE_FOLDER/whonix_shared/"
   elif [ "$WHONIX_BUILD_WORKSTATION" = "1" ]; then
      verify_whonix_source_files_helper "$WHONIX_SOURCE_FOLDER/whonix_workstation/"
      verify_whonix_source_files_helper "$WHONIX_SOURCE_FOLDER/whonix_shared/"
   else
      bug "${red}${bold}ERROR: Neither WHONIX_BUILD_GATEWAY nor WHONIX_BUILD_WORKSTATION is set to 1. Please report this bug!${reset}"
   fi

   set -x
}

parse_dpkg_status_file() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   ## Check which packages are claimed to be installed within the build.
   local dpkg_status_file=""$CHROOT_FOLDER"/var/lib/dpkg/status"
   mapfile -t lines < "$dpkg_status_file"
   
   #set +x
   
   echo "${cyan}$0 INFO: Parsing $dpkg_status_file... ${reset}"
   
   local i=0
  
   for line in "${lines[@]}"; do
      ## example line: Package: bash
      
      local first="$(echo "$line" | awk '{print $1}')"   
 
      if [ "${first,,}" = "package:" ]; then
         local i="$(expr "$i" + 1)"
         
         ## Debugging.
         ## TODO: Out comment.
         #if [ "$i" -ge "10" ]; then
            #echo "${red}$0: XXXXXXXXXXXXXX ${reset}"
            #break
         #fi
      
         local package="$(echo "$line" | awk '{print $2}')"
         continue
      fi
      
      if [ "${first,,}" = "status:" ]; then
         local status="$(echo "$line" | awk '{print $2}')"
         continue
      fi      
      
      if [ "${first,,}" = "architecture:" ]; then
         local arch="$(echo "$line" | awk '{print $2}')"
         continue
      fi
   
      if [ "${first,,}" = "version:" ]; then
         local version_with="$(echo "$line" | awk '{print $2}')"
         
         ## Remove "1:", "2:", etc. from version number.
         ## Not sure what 1:version in dpkg status file means.   
         local second_char="${version_with:1:1}"
         if [ "$second_char" = ":" ] ;then
            local version_without="$(echo "$version_with" | awk -F ":" '{ print $2 }')"
         else
            local version_without="$version_with"
         fi
         
         local first_six_chars="${package:0:6}"
         if [ "${first_six_chars,,}" = "whonix" ]; then
            ## Files coming with Whonix are checked against Whonix source code.
            echo "${cyan}$0 INFO: Skipping $package, because it begins with \"whonix\". ${reset}"
            continue
         fi
         
         if [ "${status,,}" = "deinstall" ]; then
            echo "${cyan}$0 INFO: Skipping $package, because status is deinstall. ${reset}"
            continue
         fi
         
         echo "$0 INFO: Adding package $package to the list of packaged to be audited."
         
         pkg_name[$package]="$package"
         pkg_arch[$package]="$arch"
         pkg_vers_with[$package]="$version_with"
         pkg_vers_without[$package]="$version_without"
         continue
      fi

   done
}

download_packages() {
   trap "error_handler_unmount_verify_build" ERR INT TERM
   
   ## We need to build a long line with all packages. Running apt-get download with one package over and over again
   ## takes ages.   
   for pkg in "${pkg_name[@]}"; do
      local pkg_list=""$pkg_list" "$pkg"="${pkg_vers_with[$pkg]}""
   done  

   set -x
   
   ## Enable apt-cacher-ng.
   export http_proxy="http://127.0.0.1:3142"

   ## TODO: Does this use verification? Temporarily remove archive key to see if verification would fail.
   ## TODO: Since we can not use quotes around $pkg_list we should check that nothing like $(echo test) can be executed.
   ##       For testing, change the path of the dpkg status file to a file in your homefolder and prepare it with things
   ##       like $(echo test).
   sudo -E -u "$USERNAME" apt-get download $pkg_list
   true "${cyan}$0 INFO: apt_get_return: $? ${reset}"
   
   ## Disable apt-cacher-ng.
   export unset http_proxy  
}

extract_packages() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   for pkg in "${pkg_name[@]}"; do

      ## Extract the package including the DEBIAN folder.
      sudo -u "$USERNAME" \
         dpkg-deb \
            --raw-extract \
            ""$pkg"_"${pkg_vers_without[$pkg]}"_"${pkg_arch[$pkg]}".deb" \
            ""$TEMP_FOLDER"/"$pkg"_"${pkg_vers_without[$pkg]}""
   
   done   
}

verify_packages() {
   trap "error_handler_unmount_verify_build" ERR INT TERM
   
   ## Loading and comparing md5sums from local machine, which is trusted while auditing.
   ## Note: md5 should be fine here. Debian offers only md5 for package contents, but since the whole package
   ## gets verified with stronger hash sums, we can trust the md5sums file.
   ## TODO: Or not. The version inside the image could include a md5 collision.
   
   for pkg in "${pkg_name[@]}"; do
   
      mapfile -t lines < ""$TEMP_FOLDER"/"$pkg"_"${pkg_vers_without[$pkg]}"/DEBIAN/md5sums"
   
      #set +x
   
      for line in "${lines[@]}"; do
         ## Example line: 539e96d4fba5635c346a904107b4244e  bin/bash
   
         local pkg_content_md5sum="$(echo "$line" | awk '{print $1}')"
         local pkg_content_filename="$(echo "$line" | awk '{print $2}')"
   
         local md5_actual="$(md5sum ""$CHROOT_FOLDER"/"$pkg_content_filename"")"
         ## Example md5_actual: 979992095c9402655134383ffbd4cbe8  /usr/share/man/man4/vmmouse.4.gz
            
         local md5_actual="$(echo "$md5_actual" | awk '{print $1}')"
         ## Example md5_actual: 979992095c9402655134383ffbd4cbe8
   
         if [ "$pkg_content_md5sum" = "$md5_actual" ]; then
            remembered_file["$pkg_content_filename"]="0"
         else
            WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
            remembered_file["$pkg_content_filename"]="1"
            true "${red}${bold}ERROR: Mismatch in package $pkd_${pkg_vers_without[$pkg]}. md5 of /$pkg_content_filename should be $pkg_content_md5sum but is $md5_actual. ${reset}"
         fi
   
      done
   
   done

   set -x
}

forgotten_files() {
   trap "error_handler_unmount_verify_build" ERR INT TERM

   local folder=""$CHROOT_FOLDER""
   
   local j="0"

   set +x

   for i in $(find "$folder"); do
      local j="$(expr "$j" + "1")"

      ## Debugging.
      ## TODO: Out comment.
      if [ "$j" -gt "10000" ]; then
         break
      fi
      
      if [ -d "$i" ]; then
         continue
      fi
      if [ "$(basename "$i")" = ".directory" ]; then
         echo "${bold}${cyan}INFO: skipping to diff $i. ${reset}"
         continue
      fi
      local temp="${i#"$folder"}"
      local chroot_file="$CHROOT_FOLDER"/"$temp"

      #echo "${cyan}INFO${reset}: i: "$i" temp: "$temp""

      if [ "${remembered_file["$temp"]}" = "0" ]; then
         echo "${cyan}INFO: Already known as good file: $i || temp: $temp ${reset}"         
         continue
      elif [ "${remembered_file["$temp"]}" = "1" ]; then
         echo "${cyan}INFO: Already known as bad file, i: $i || temp: $temp ${reset}"
         continue
      else
         #echo "${bold}${red}ERROR: Forgotten file i: $i || temp: $temp ${reset}"
         WHONIX_BUILD_VERIFY_MISMATCH="$(expr "$WHONIX_BUILD_VERIFY_MISMATCH" + "1")"
         remembered_file["$temp"]="1"
         continue
      fi
   done

   set -x
}

verify_whonix_source_files
parse_dpkg_status_file
download_packages
extract_packages
verify_packages
forgotten_files

## Get out of this folder, so unmounting will work.
cd "$WHONIX_BUILD_VERIFY_OLD_PWD"

## TODO: activate
"$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-img

if [ "$WHONIX_BUILD_VERIFY_MISMATCH" = "0" ]; then
   ## ok, no mismatch
   true "${green}${bold}$0 INFO: No mismatch found. ${reset}"
else
   error "${red}${bold}$0 ERROR: $WHONIX_BUILD_VERIFY_MISMATCH files mismatched! See the red messages above to find out which files. ${reset}"
fi


#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set +x
#set -x

set -o pipefail

error_handler_shell() {
   $output_command "${cyan}${bold}INFO: Opening interactive shell...${reset}"
   $output_command "${cyan}${bold}INFO: When you have finished, please enter \"exit 0\" to \
continue (Recommended against!) or \"exit 1\" to cleanup and exit. (Recommended.)${reset}"
   interactive_chroot_shell_bash_exit_code="0"
   $CHROOT /bin/bash || { interactive_chroot_shell_bash_exit_code="${PIPESTATUS[0]}" ; true; };
   if [ "$interactive_chroot_shell_bash_exit_code" = "0" ]; then
      $output_command "${cyan}${bold}INFO: Interactive shell termited with \
exit code $interactive_chroot_shell_bash_exit_code, will ignore this error and continue...${reset}"
      ignore_error="true"
   else
      $output_command "${cyan}${bold}INFO: Interactive shell termited with \
exit code $interactive_chroot_shell_bash_exit_code, cleanup and exit as requested...${reset}"
      ignore_error="false"
   fi
}

error_handler_shared() {
   last_exit_code="$?"
   last_bash_command="$BASH_COMMAND"
   ## test -o xtrace
   ## exits:
   ## - 0, if -x is set
   ## - 1, if -x is not set
   if [ test -o xtrace = "0" ]; then
      ## -x was set
      ## Temporarily set +x, to prevent duplicate output of following read -p.
      set +x
      output_command="true"
      benchmark_time_end ## sets benchmark_took_time (implemented in help-steps/pre)
      if [ ! "$whonix_build_non_interactive" = "1" ]; then
         read -p "\
${red}${bold}ERROR in $BASH_SOURCE detected!
Please have a look above \"error_handler_general\", note the command that failed, its output and last_exit_code.
- Please enter c and press enter to ignore the error and continue building. (Recommended against!)
- Please press s and enter to open an chroot interactive shell.
- Please press enter to cleanup and exit. ${reset}" answer
      else
         echo "INFO: whonix_build_non_interactive set to 1, using non-interactive error handler."
      fi
      if [ "$answer" = "continue" ] || [ "$answer" = "c" ]; then
         ignore_error="true"
         interactive_chroot_shell="false"
      elif [ "$answer" = "s" ] || [ "$answer" = "shell" ]; then
         interactive_chroot_shell="true"
      else
         ignore_error="false"
         interactive_chroot_shell="false"
      fi
      ## Re-enable set -x.
      set -x
   else
      ## -x was not set
      output_command="echo"
      benchmark_time_end ## sets benchmark_took_time (implemented in help-steps/pre)
      if [ ! "$whonix_build_non_interactive" = "1" ]; then
         read -p "\
${red}${bold}ERROR in $BASH_SOURCE detected!
Please have a look above \"error_handler_general\", note the command that failed, its output and last_exit_code.
- Please enter c and press enter to ignore the error and continue building. (Recommended against!)
- Please press s and enter to open an interactive chroot shell.
- Please press enter to cleanup and exit. ${reset}" answer
      else
         echo "INFO: whonix_build_non_interactive set to 1, using non-interactive error handler."
      fi
      if [ "$answer" = "continue" ] || [ "$answer" = "c" ]; then
         ignore_error="true"
         interactive_chroot_shell="false"
      elif [ "$answer" = "s" ] || [ "$answer" = "shell" ]; then
         interactive_chroot_shell="true"
      else
         ignore_error="false"
         interactive_chroot_shell="false"
      fi
   fi
   if [ "$interactive_chroot_shell" = "true" ]; then
      error_handler_shell
   fi
   last_caller="$(caller)"
   last_script="$BASH_SOURCE"
}

error_handler_exit() {
   if [ "$ignore_error" = "true" ]; then
      abort_or_continue="Continue"
   else
      abort_or_continue="Aborted"
      ## Removing temporary debian testing (jessie) repository.
      rm --force "/etc/apt/sources.list.d/whonix_temp.list"
      ## Remove lockfile for whonixcheck.
      rm --force "/var/run/package_manager_lock"
      rm --force "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
      rm --force "$WHONIX_BUILD_APT_GET_GPGV_LOG"
   fi
   $output_command "
############################################################
${red}${bold}ERROR in $last_script detected! $abort_or_continue!${reset}
(benchmark: $benchmark_took_time)
${red}${bold}BASH_COMMAND${reset}: $last_bash_command
${red}${bold}last_exit_code${reset}: $last_exit_code
${red}${bold}caller: $last_caller${reset}
${red}${bold}ERROR in $last_script! $abort_or_continue!${reset}
############################################################
"
   if [ "$ignore_error" = "true" ]; then
      if [ ! "$whonix_build_non_interactive" = "1" ]; then
         true "${red}${bold}You have chosen to ignore this error. Your build may be unstable!
This is recommended against unless you know what you are doing. Do not report
bugs, that are a result of this! Please press enter to continue. ${reset}"
      else
         true "INFO: whonix_build_non_interactive set to 1, using non-interactive error handler."
      fi
   else
      exit 1
   fi
}

error_handler_general() {
   error_handler_shared
   error_handler_exit
}

error_handler_unchroot_unprevent_unmount() {
   error_handler_shared
   if [ "$ignore_error" = "false" ]; then
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/remove-local-temp-apt-repo
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unchroot-raw
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unprevent-daemons-from-starting
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-raw
   fi
   error_handler_exit
}

error_handler_unmount() {
   error_handler_shared
   if [ "$ignore_error" = "false" ]; then
      "$WHONIX_SOURCE_HELP_STEPS_FOLDER"/unmount-raw
   fi
   error_handler_exit
}

trap "error_handler_general" ERR INT TERM

bash -n "$BASH_SOURCE"

export -f error_handler_shell
export -f error_handler_shared
export -f error_handler_exit
export -f error_handler_general
export -f error_handler_unchroot_unprevent_unmount
export -f error_handler_unmount

maybe_set_plus_x() {
   if [ "$MINUS_X_SET" = "1" ]; then
      set +x
   fi
}

## Thanks to  perreal for the convertsecs function.
## http://stackoverflow.com/a/12199798
convertsecs() {
   ((h=${1}/3600))
   ((m=(${1}%3600)/60))
   ((s=${1}%60))
   printf "%02d:%02d:%02d\n" $h $m $s
   true
}

export -f convertsecs

benchmark_time_start() {
   export benchmark_time_start="$(date +%s)"
   true
}

benchmark_time_end() {
   benchmark_time_end="$(date +%s)"
   benchmark_took_seconds="$(( $benchmark_time_end - $benchmark_time_start ))"
   benchmark_took_time="$(convertsecs "$benchmark_took_seconds")"
   true
}

export -f benchmark_time_end

## start benchmark_time_end
benchmark_time_start

colors() {
   trap "error_handler_general" ERR INT TERM

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/037
   ## Variables for terminal requests.
   [[ -t 2 ]] && {
       export alt=$(      tput smcup  || tput ti      ) # Start alt display
       export ealt=$(     tput rmcup  || tput te      ) # End   alt display
       export hide=$(     tput civis  || tput vi      ) # Hide cursor
       export show=$(     tput cnorm  || tput ve      ) # Show cursor
       export save=$(     tput sc                     ) # Save cursor
       export load=$(     tput rc                     ) # Load cursor
       export bold=$(     tput bold   || tput md      ) # Start bold
       export stout=$(    tput smso   || tput so      ) # Start stand-out
       export estout=$(   tput rmso   || tput se      ) # End stand-out
       export under=$(    tput smul   || tput us      ) # Start underline
       export eunder=$(   tput rmul   || tput ue      ) # End   underline
       export reset=$(    tput sgr0   || tput me      ) # Reset cursor
       export blink=$(    tput blink  || tput mb      ) # Start blinking
       export italic=$(   tput sitm   || tput ZH      ) # Start italic
       export eitalic=$(  tput ritm   || tput ZR      ) # End   italic
   [[ $TERM != *-m ]] && {
       export red=$(      tput setaf 1|| tput AF 1    )
       export green=$(    tput setaf 2|| tput AF 2    )
       export yellow=$(   tput setaf 3|| tput AF 3    )
       export blue=$(     tput setaf 4|| tput AF 4    )
       export magenta=$(  tput setaf 5|| tput AF 5    )
       export cyan=$(     tput setaf 6|| tput AF 6    )
   }
       export white=$(    tput setaf 7|| tput AF 7    )
       export default=$(  tput op                     )
       export eed=$(      tput ed     || tput cd      )   # Erase to end of display
       export eel=$(      tput el     || tput ce      )   # Erase to end of line
       export ebl=$(      tput el1    || tput cb      )   # Erase to beginning of line
       export ewl=$eel$ebl                                # Erase whole line
       export draw=$(     tput -S <<< '   enacs
                                   smacs
                                   acsc
                                   rmacs' || { \
                   tput eA; tput as;
                   tput ac; tput ae;         } )   # Drawing characters
       export back=$'\b'
   } 2>/dev/null ||:

   export whonix_build_already_defined_colors="true"
}

if [ ! "$whonix_build_already_defined_colors" = "true" ]; then
   colors
fi

if [ ! "$ROOT_CHECK" = "0" ]; then
   if [ "$(id -u)" != "0" ]; then
       echo "${red}${bold}ERROR: This must be run as root (sudo)!${reset}"
       exit 1
   else
       true "INFO: Script running as root."
   fi
fi

lower_priorities() {
   trap "error_handler_general" ERR INT TERM

   ## Lower IO priority.
   ionice -c3 -p$$

   ## Debugging.
   ionice >/dev/null

   ## Lower CPU priority.
   renice +19 -p $$ >/dev/null

   ## Debugging.
   nice >/dev/null

   export whonix_build_already_lowered_priorities="true"
}

if [ ! "$whonix_build_already_lowered_priorities" = "true" ]; then
   lower_priorities
fi

maybe_enable_apt_cache() {
   trap "error_handler_general" ERR INT TERM

   if [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      ## Someone updating Whonix-Gateway from source code.

      ## apt-cacher-ng will not work on Whonix-Gateway, because Whonix-Gateway
      ## does not have TransPort / DnsPort by default.
      echo 'INFO: Not setting http_proxy, because Whonix-Gateway detected, ok.'
      true
   else
      if [ "$http_proxy" = "" ]; then
         ## Enable apt-cacher-ng.
         echo 'INFO: Setting, export http_proxy="http://127.0.0.1:3142"'
         export http_proxy="http://127.0.0.1:3142"
      else
         echo "INFO: Leaving custom variable http_proxy $http_proxy as is."
      fi
   fi
}

export -f maybe_enable_apt_cache

disable_apt_cache() {
   trap "error_handler_general" ERR INT TERM

   unset http_proxy
}

export -f disable_apt_cache

## {{ apt_get_gpgv

create_tmp_apt_get_gpgv() {
   trap "error_handler_general" ERR INT TERM

   ## workaround for
   ##     apt: Provide meaningful exit codes for gpg failures
   ##     https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=745735
   ## W: A error occurred during the signature verification.
   ## To catch situations such as:
   ##     The repository is not updated and the previous index files will be used.
   ##     GPG error: http://deb.torproject.org stable Release: The following signatures were invalid: KEYEXPIRED 1409325681 KEYEXPIRED 1409325681 KEYEXPIRED 1409325681 KEYEXPIRED 1409325681
   ## That apt-repository would otherwise be silently ignored without error notification.

   apt_get_gpgv_opts+=" -o Dir::Bin::gpg=$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN "
   export apt_get_gpgv_opts

   rm --force "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
   touch "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"

   ## apt-get calls gpgv (this gpgv wrapper) with --status-fd 3. We redirect
   ## a copy of file descriptor 3 to the log.
   ## Variable WHONIX_BUILD_APT_GET_GPGV_LOG gets set and exported in help-steps/variables.
   echo '#!/bin/bash
gpgv ${1+"$@"} 3> >(tee --append "$WHONIX_BUILD_APT_GET_GPGV_LOG" >&3)' > "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"

   chmod +x "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
}

export -f create_tmp_apt_get_gpgv

parse_tmp_apt_get_gpgv() {
   trap "error_handler_general" ERR INT TERM

   local gpg_log
   gpg_log="$(cat "$WHONIX_BUILD_APT_GET_GPGV_LOG")"
   if [ "$gpg_log" = "" ]; then
      true "ERROR: variable gpg_log is empty!"
      error "See above!"
   fi

   local current_unixtime
   current_unixtime="$(date +%s)"
   local current_time
   current_time="$(date)"

   OIFS="$IFS"
   IFS="
"

   for line in $gpg_log; do
      IFS="$OIFS"
      true "line: $line"
      local one two three four five
      read -r one two three four five _ <<< "$line"
      true "one: $one | two: $two | three: $three | four: $four | five: $five"
      if [ "$two" = "KEYEXPIRED" ]; then
         local keyexpired_unixtime
         keyexpired_unixtime="$three"
         if [ "$current_unixtime" -ge "$keyexpired_unixtime" ]; then
            local difference_in_seconds difference_in_minutes difference_in_hours difference_in_days difference_in_years month_has_seconds half_month_has_seconds maximum_age_in_seconds
            difference_in_seconds="$(( $current_unixtime - $keyexpired_unixtime ))"
            difference_in_minutes="$(( $difference_in_seconds / 60 ))"
            difference_in_hours="$(( $difference_in_minutes / 60 ))"
            difference_in_days="$(( $difference_in_hours / 24 ))"
            difference_in_years="$(( $difference_in_days / 365 ))"
            month_has_seconds="2592000"
            half_month_has_seconds="$(( $month_has_seconds / 2 ))"
            maximum_age_in_seconds="$half_month_has_seconds"
            if [ "$difference_in_seconds" -ge "$maximum_age_in_seconds" ]; then
               true "${bold}${red}ERROR: apt-get gpgv KEYEXPIRED!
current_unixtime: $current_unixtime
keyexpired_unixtime: $keyexpired_unixtime
current_time: $current_time
difference_in_seconds: $difference_in_seconds
difference_in_minutes: $difference_in_minutes
difference_in_hours: $difference_in_hours
difference_in_days: $difference_in_days
difference_in_years: $difference_in_years
See above!${reset}"
               error "See above!"
            fi
         fi
      fi
   done

   ## Fallback, in case $gpg_log was empty and that error was skipped.
   IFS="$OIFS"
}

export -f parse_tmp_apt_get_gpgv

delete_tmp_apt_get_gpgv() {
   trap "error_handler_general" ERR INT TERM
   rm --force "$WHONIX_BUILD_APT_GET_GPGV_TEMP_BIN"
   rm --force "$WHONIX_BUILD_APT_GET_GPGV_LOG"
}

export -f delete_tmp_apt_get_gpgv

## Prevent the log from needlessly filling up.
rm --force "$WHONIX_BUILD_APT_GET_GPGV_LOG"

## }} apt_get_gpgv

#echo "${bold}Currently running script: $BASH_SOURCE${reset}"

set -x

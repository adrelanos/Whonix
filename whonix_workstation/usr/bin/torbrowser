#!/bin/bash

## Whonix /usr/bin/torbrowser

## Tor Browser download script for Whonix.
## See its man page for available command line options.

SCRIPTNAME="$(basename $0)"
IDENTIFIER="$SCRIPTNAME"
ICON="/usr/share/whonix/icons/tbupdate.ico"

## Developer comment on this script:
## I would be very happy if this script would not be required.
## Unfortunately, it is required. It works around a lot bugs:
## - There is no deb/rpm/whatever package with Tor Browser.
##   https://trac.torproject.org/projects/tor/ticket/5236
##   https://trac.torproject.org/projects/tor/ticket/3994
## - There is no way to keep Tor Browser updated.
##   (Thandy doesn't exist yet.)
## - There is no way to add the Whonix Documentation well visible to Tor Browser:
##   https://trac.torproject.org/projects/tor/ticket/6025
##   https://trac.torproject.org/projects/tor/ticket/6053
## - Tor Browsers support for Isolating and Transparent Proxies is very limited:
##   https://trac.torproject.org/projects/tor/ticket/5611
## - tbb-scripts
##   https://github.com/adrelanos/tbb-scripts



root_check() {
   if [ "$(id -u)" != "0" ]; then
      #echo "INFO: $SCRIPTNAME running as user."
      true
   else
      $output ${output_opts[@]} --progress "100"
      sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"
      $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --showx

      exit 1
   fi
}



tb_error_handler() {
   local return_code="$?"

   local MSG="\
###########################################################
## $SCRIPTNAME script bug.
## No panic. Nothing is broken. Just some rare condition
## has been hit. Try again later. There is likely a
## solution for this problem. Please see the Whonix News,
## Whonix User Help Forum and Whonix Documentation.
## https://www.whonix.org/wiki/Tor_Browser
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## return_code: $return_code
##
## Experts only:
## bash -x $SCRIPTNAME
###########################################################\
"
   echo "$MSG"
   $output ${output_opts[@]} --progress "100" 
   $output ${output_opts[@]} --channel "x" --type "error" --title "$TITLE" --message "$MSG"
   $output ${output_opts[@]} --showx

   exit 1
}

trap "tb_error_handler" ERR



trap_sigterm() {
   MSG="$SCRIPTNAME: sigterm received. Exiting."
   $output ${output_opts[@]} --progress "100"
   sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"
   $output ${output_opts[@]} --channel "echo" --type "error" --title "$TITLE" --message "$MSG"

   #MSG="Aborted."
   #$output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
   #$output ${output_opts[@]} --showx
   
   exit 1
}

trap "trap_sigterm" SIGTERM



debug() {
   ## debug is just a marker for messages which is are not essential for users.
   ## either in cli or gui.
   echo "$*"
}



TEMP1="Possible reasons:
- no internet connectivity

Please check: Start menu -> System -> Whonix Check
              or in Terminal: whonixcheck
              or in Terminal with debugging: whonixcheck -v

Run whonixcheck on Whonix-Gatway as well.

If whonixcheck reports no problems with internet activity and this still fails, please report a bug!"

TEMP2="As last resort you can also manually update Tor Browser.

Check Whonix News:
https://www.whonix.org/wiki/Download#Stay_tuned

Check for latest version Tor Browser Bundle version:
https://blog.torproject.org

Manually update:
https://www.whonix.org/wiki/Manually_Updating_Tor_Browser"



DOWNLOAD_FAIL_HELP="$TEMP1

$TEMP2"



VERSION_DETECTION_ERROR="Could not find out latest Tor Browser version!

$TEMP2"



GATEWAY_IP="192.168.0.10"
SOCKS_PORT_TBB_DOWNLOAD="9115"

DOC_LINK="https://www.whonix.org/wiki/Documentation"
CONTRIBUTE_LINK="https://www.whonix.org/wiki/Contribute"
DONATE_LINK="https://www.whonix.org/wiki/Donate"
FORUM_LINK="https://whonix.org/wiki/Special:AWCforum/"
MAILINGLIST_LINK="https://whonix.org/cgi-bin/mailman/listinfo/"
IMPORTANTBLOG_LINK="https://anonymousoperatingsystem.wordpress.com/category/important/"
FEATUREBLOG_LINK="https://anonymousoperatingsystem.wordpress.com/"

IMPORTANTBLOG_OFFLINE_FILE="/var/lib/whonix/whonixcheck/important_blog.txt"
IMPORTANTBLOG_OFFLINE_LINK="file://"$IMPORTANTBLOG_OFFLINE_FILE""

IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_FILE="/var/lib/whonix/whonixcheck/import_blog_not_available.txt"
IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_LINK="file://"$IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_FILE""

FEATUREBLOG_OFFLINE_FILE="/var/lib/whonix/whonixcheck/feature_blog.txt"
FEATUREBLOG_OFFLINE_LINK="file://"$FEATUREBLOG_OFFLINE_FILE""

FEATUREBLOG_NOT_AVAILABLE_OFFLINE_FILE="/var/lib/whonix/whonixcheck/feature_blog_not_available.txt"
FEATUREBLOG_NOT_AVAILABLE_OFFLINE_LINK="file://"$FEATUREBLOG_NOT_AVAILABLE_OFFLINE_FILE""


parse_cmd_options() {
   trap "tb_error_handler" ERR
   
   if [ "$1" = "" ]; then
      echo "$SCRIPTNAME no option chosen."
      echo "See:"
      echo "    man $SCRIPTNAME"
      exit 1   
   fi
  
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while :
   do
       case $1 in             
           --update)
               TB_UPDATE="1"
               shift
               ;;            
           --noask)
               TB_UPDATE="1"           
               TB_FORCE_INSTALL="1"
               shift
               ;;
           --nokilltb)
               TB_UPDATE="1"
               NOKILLTB="1"
               shift
               ;;         
           --devbuildpassthrough)
               TB_UPDATE="1"           
               TB_FORCE_INSTALL="1"
               DEV_BUILD_PASSTHROUGH="1"
               DEV_PASSTHROUGH="1"
               shift
               ;;
           --clearnet)
               TB_CLEARNET="1"
               shift
               ;;               
           --language)             
               TB_LANG="$2"
               shift 2
               ;;
           --start)
               LINK=""
               shift
               ;;            
           --doc)
               LINK="$DOC_LINK"
               shift
               ;;
           --contribute)
               LINK="$CONTRIBUTE_LINK"
               shift
               ;;               
           --doc)
               LINK="$DOC_LINK"
               shift
               ;;           
           --donate)
               LINK="$DONATE_LINK"
               shift
               ;;
           --forum)
               LINK="$FORUM_LINK"
               shift
               ;;               
           --mailinglist)
               LINK="$MAILINGLIST_LINK"
               shift
               ;;
           --importantblog)
               LINK="$IMPORTANTBLOG_LINK"
               shift
               ;;               
           --featureblog)
               LINK="$FEATUREBLOG_LINK"
               shift
               ;;
           --newtab)
               LINK="$2"
               shift 2
               ;;               
           --recommend)
               tb_start_recommend
               shift
               ;;      
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1"
               echo "See:"
               echo "    man $SCRIPTNAME"
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done   

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.   
}



tb_preparation() {
   trap "tb_error_handler" ERR

   ## Fortunately, on linux-image-486 kernel, while "uname --all" returns for example
   ## "Linux host 3.2.0-4-486 #1 Debian 3.2.41-2 i686 GNU/Linux",
   ## "uname --machine" returns "i686" and Tor Browser works fine with linux-image-486 kernel.
   ## (There are no 486 downloads for Tor Browser.)
   ##ARCH="x86_64"
   ##ARCH="i686"
   ARCH="$(uname --machine)"
   echo "INFO: $ARCH detected."

   ## provides tbbversion function
   source /usr/lib/whonix/whonixcheck/help_tbbversion

   ## provides $CURL variable
   source /usr/lib/whonix/whonixcheck/help_uwt_tool
   uwt_tool
   
   #debug "TB_LANG: $TB_LANG"
   
   for i in /etc/whonix.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi         
         source "$i"
      fi
   done

   ## Check if TB_LANG exists and is not empty.
   if [[ "$TB_LANG" && "${TB_LANG}" ]]; then
      #debug "INFO: Tor Browser language variable is set to "$TB_LANG"."
      true
   else
      #debug "INFO: Tor Browser language variable not found. Setting TB_LANG to the default en-US."
      TB_LANG="en-US"
   fi

   if [ "$display" = "" ]; then
      if [ "$DISPLAY" = "" ]; then
         display=":0"
      else
         display="$DISPLAY"
      fi
   fi

   rm --force "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"

   output="sudo -u user /usr/lib/whonix/doutput"

   output_opt_1="--icon $ICON"
   output_opt_2="--display $display"
   output_opt_3="--identifier $IDENTIFIER"
   output_opt_4="--instantecho"
   output_opt_5="--nonewlinecli"

   output_opts=( "$output_opt_1" "$output_opt_2" "$output_opt_3" "$output_opt_4" "$output_opt_5")

   TITLE="Tor Browser Update Check (Whonix)"

   $output ${output_opts[@]} --forget
}



tb_update_check() {
   trap "tb_error_handler" ERR

   ## do not re-download Tor Browser if a previous build already did
   if [ "$DEV_BUILD_PASSTHROUGH" = "1" ]; then
      if [ -d ~/tor-browser_"$TB_LANG"/ ]; then
         echo "$SCRIPTNAME: Not downloading Tor Browser again, because ~/tor-browser_"$TB_LANG"/ already exists."
         exit 0
      fi
   fi

   ## progress bar for update check
   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      $output ${output_opts[@]} --forget

      NOTIFY_MSG="Checking Tor Browser version... Will take a moment..."

      $output ${output_opts[@]} --progressbar --title "$TITLE" --message "$NOTIFY_MSG" --parentpid "$$" &
   fi

   if [ "$DEV_PASSTHROUGH" = "1" ]; then
      CURL_PROXY=""
   else
      CURL_PROXY="--socks5-hostname socks5h://"$GATEWAY_IP":"$SOCKS_PORT_TBB_DOWNLOAD"/"
   fi

   $output ${output_opts[@]} --progress "10"
   debug "INFO: Find out latest version..."
   LINK="https://check.torproject.org/RecommendedTBBVersions"
   debug "INFO: Downloading: "$LINK""
   
   mkdir --parents ~/.tb
   
   CURL_RETURN="0"
   $CURL \
      --fail \
      $CURL_PROXY \
      --tlsv1 \
      --proto =https \
      --max-time 180 \
      --output ~/.tb/RecommendedTBBVersions \
      --progress-bar \
      "$LINK" \
      &

   wait "$!" || { CURL_RETURN="$?" ; true; };

   $output ${output_opts[@]} --progress "95"

   ## Check if curl failed.
   if [ ! "$CURL_RETURN" = "0" ]; then
      MSG="Failed to download: "$LINK"

$DOWNLOAD_FAIL_HELP"

      $output ${output_opts[@]} --progress "100"
      sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"
      $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --showx

      exit 1
   fi

   $output ${output_opts[@]} --progress "96"
}



tb_download() {
   trap "tb_error_handler" ERR

   RecommendedTBBVersions=~/.tb/RecommendedTBBVersions

   ## sets: TBBVERSION
   tbbversion

   if [ "$TBBVERSION" = "UNKNOWN" ]; then
      MSG="$VERSION_DETECTION_ERROR"

      $output ${output_opts[@]} --progress "100"
      sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"
      $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --showx

      exit 1
   fi

   $output ${output_opts[@]} --progress "97"

   ## Will fail if the file does not exist, i.e. Tor Browser not installed.
   ## Will not break the script.
   TBBINSTALLEDVERSION="$(head -1 ~/tor-browser_"$TB_LANG"/Docs/version)" || true

   $output ${output_opts[@]} --progress "100"
   sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"

   if [ "$TBBINSTALLEDVERSION" != "" ]; then
      #debug "INFO: Successfully detected Tor Browser version."
      true
   else
      debug "\
INFO: Could not determine the currently installed Tor Browser version.
INFO: This could be either because none is installed or because the version format changed.\
"
      TBBINSTALLEDVERSION="UNKNOWN OR NONE"
   fi

   if [ "$TBBINSTALLEDVERSION" = "$TBBVERSION" ]; then
      VERSION_CHECK_RESULT="Looks like your Tor Browser version is up to date."
   else
      VERSION_CHECK_RESULT="Looks like there is an update for Tor Browser."
   fi

   local answer="0"

   MSG="\
"$SCRIPTNAME" Update Check (Whonix)
----------------------------------------------------------------------
"$VERSION_CHECK_RESULT"

Please close Tor Browser if you want to upgrade!
Currently installed version: "$TBBINSTALLEDVERSION"
Online detected version    : "$TBBVERSION"

If your currently installed version is:
   higher: you are likely victim of a downgrade attack, SAY NO NOW!
   equal : only proceed, if you want to create a new browser profile.
   lower : you should upgrade.

YOUR BROWSER WILL BE KILLED.
YOUR WHOLE BROWSER PROFILE INCLUDING BOOKMARKS AND PASSWORDS WILL GET REPLACED!

A backup of your old Tor Browser and settings will be created in your home folder.
It is a good idea to delete old TBB backups once in a while if you are running low with disk space.\
"

   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      zenity --title="$TITLE" --question --text "$MSG" || { local answer="$?" ; true; };

      ## zenity return codes
      ## no 1
      ## yes 0

      debug "answer: $answer"

      if [ "$TB_FORCE_INSTALL" = "1" ]; then
         debug "INFO: TB_FORCE_INSTALL = 1"
         true
      else
         if [ "$answer" = "1" ]; then 
            exit 0
         fi
      fi
   fi

   ## progress bar for download
   if [ "$TB_FORCE_INSTALL" = "1" ]; then
      true
   else
      $output ${output_opts[@]} --forget

      NOTIFY_MSG="Downloading Tor Browser... Will take a while..."

      $output ${output_opts[@]} --progressbar --title "$TITLE" --message "$NOTIFY_MSG" --parentpid "$$" &
   fi

   $output ${output_opts[@]} --progress "5"

   if [ ! "$NOKILLTB" = "1" ]; then
      killall firefox || true
   fi

   rm --recursive --force ~/.tb/gpgtmpdir/
   mkdir --parents ~/.tb/gpgtmpdir/
   chmod --recursive 700 ~/.tb/gpgtmpdir/

   gpg --homedir ~/.tb/gpgtmpdir/ --import /usr/share/whonix/keys/tbb-keys.d/*

   ## Download from the torproject.org hidden service, instead over clearnet,
   ## thus not involving any Tor exist nodes.
   ## $WHONIX is an environment variable only set in Whonix (by /etc/environment).
   if [ "$WHONIX" = "1" ]; then
      TBB_REMOTE_FOLDER="http://idnxcnkne4qt76tg.onion/dist/torbrowser/linux"
      ## Connections to hidden services are automatically encrypted end-to-end.
      CURL_FORCE_SSL=""
   else
      ## Should only be the case when building Whonix from source while not being inside Whonix.
      TBB_REMOTE_FOLDER="https://www.torproject.org/dist/torbrowser/linux"
      CURL_FORCE_SSL="--tlsv1 --proto =https"
   fi
   
   if [ "$TB_CLEARNET" = "1" ]; then
      ## In case the --clearnet option was used.
      TBB_REMOTE_FOLDER="https://www.torproject.org/dist/torbrowser/linux"
      CURL_FORCE_SSL="--tlsv1 --proto =https"   
   fi

   $output ${output_opts[@]} --progress "10"

   debug "INFO: Downloading GPG signature..."
   TBB_SIG_FILENAME="tor-browser-gnu-linux-"$ARCH"-"$TBBVERSION"-dev-"$TB_LANG".tar.gz.asc"
   TBB_SIG_LINK=""$TBB_REMOTE_FOLDER"/"$TBB_SIG_FILENAME""
   debug "INFO: Downloading: "$TBB_SIG_LINK""
   
   CURL_RETURN="0"
   $CURL \
      --fail \
      $CURL_PROXY \
      $CURL_FORCE_SSL \
      --max-time 180 \
      --output ~/.tb/"$TBB_SIG_FILENAME" \
      --progress-bar \
      "$TBB_SIG_LINK" \
      &

   wait "$!" || { CURL_RETURN="$?" ; true; };

   ## Check if curl failed.
   if [ ! "$CURL_RETURN" = "0" ]; then
      MSG= "Failed to download: "$TBB_SIG_LINK"

$DOWNLOAD_FAIL_HELP"
      $output ${output_opts[@]} --progress "100"
      sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"
      $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --showx

      exit 1
   fi

   $output ${output_opts[@]} --progress "30"

   debug "INFO: Downloading Tor Browser Bundle: $TBBVERSION"
   TBB_PACKAGE_FILENAME="tor-browser-gnu-linux-"$ARCH"-"$TBBVERSION"-dev-"$TB_LANG".tar.gz"
   TBB_PACKAGE_LINK=""$TBB_REMOTE_FOLDER"/"$TBB_PACKAGE_FILENAME""
   debug "INFO: Downloading: "$TBB_PACKAGE_LINK""
   
   CURL_RETURN="0"
   $CURL \
      --fail \
      $CURL_PROXY \
      $CURL_FORCE_SSL \
      --output ~/.tb/"$TBB_PACKAGE_FILENAME" \
      --progress-bar \
      "$TBB_PACKAGE_LINK" \
      &

   wait "$!" || { CURL_RETURN="$?" ; true; };

   ## Check if curl failed.
   if [ ! "$CURL_RETURN" = "0" ]; then
      MSG="Failed to download: "$TBB_PACKAGE_LINK"

$DOWNLOAD_FAIL_HELP"

      $output ${output_opts[@]} --progress "100"
      sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"
      $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --showx

      exit 1
fi

   $output ${output_opts[@]} --progress "90"
}

tb_verify() {
   trap "tb_error_handler" ERR

   debug "INFO:
## Verifying GPG signature.
## Not using the users GPG keyring also ensures, that the key can be only
## singed by the GPG keys we added. Signatures from random people from the
## users keyring will be ignored.
"

   TB_GPG_VERIFY_RETURN="0"
   gpg \
   --homedir ~/.tb/gpgtmpdir/ \
   --verify ~/.tb/"$TBB_SIG_FILENAME" \
   ~/.tb/"$TBB_PACKAGE_FILENAME" \
   || { TB_GPG_VERIFY_RETURN="$?" ; true; };

   debug "INFO: Signature valid."
   
   if [ ! "$TB_GPG_VERIFY_RETURN" = "0" ]; then
MSG="\
ERROR: GPG download signature could NOT be verified.
ERROR: Tor Browser update failed! Try again later.\
"
      $output ${output_opts[@]} --progress "100"
      sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"
      $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --showx

      exit 1      
   fi
}



tb_extract() {
   trap "tb_error_handler" ERR

   tar -xzvf ~/.tb/"$TBB_PACKAGE_FILENAME" -C ~/.tb/

   $output ${output_opts[@]} --progress "91"
   ## The tor-browser_"$TB_LANG"/Docs folder should already exist.
   ## Just to make sure the script will not break in case the get changed by upstream.
   mkdir --parents ~/tor-browser_"$TB_LANG"/Docs

   $output ${output_opts[@]} --progress "92"
   debug "Moving the Tor Browser Bundle startup script to tor-browser_"$TB_LANG"/Docs/..."
   mv ~/.tb/tor-browser_"$TB_LANG"/start-tor-browser ~/.tb/tor-browser_"$TB_LANG"/Docs/

   ## Tor Browser changelog has been forgotten to update.
   ## https://sourceforge.net/p/whonix/discussion/general/thread/6122990d/
   ## To play it safe and having a chance of finding out the installed version,
   ## we create a file ourselves to remember it.
   debug "Creating version file tor-browser_"$TB_LANG"/Docs/version."
   echo ""$TBBVERSION"" > ~/.tb/tor-browser_"$TB_LANG"/Docs/version

   $output ${output_opts[@]} --progress "93"
   debug "INFO: Creating Unbundled Tor Browser startup script..."
   ## Using this until Tor Browser upstream patch #7266 gets accepted.
   ##    improve RelativeLink.sh script comments, patch attached
   ##    https://trac.torproject.org/projects/tor/ticket/7266
   ##
   ## After #7266 got accepted, a new patch with TB_STANDALONE will
   ## be proposed.
   ##
   ## Has been copied into Whonix-Workstation at build time.
   cp /usr/share/whonix/start-tor-browser ~/.tb/tor-browser_"$TB_LANG"/start-tor-browser
   chmod +x ~/.tb/tor-browser_"$TB_LANG"/start-tor-browser

   debug "INFO: Moving old folder ~/tor-browser_"$TB_LANG"..."
   mv ~/tor-browser_"$TB_LANG" ~/"tor-browser_"$TB_LANG".old."$(date '+%F-%H:%M:%S')"" || true
   
   debug "INFO: Moving temporary folder ~/.tb/tor-browser_"$TB_LANG" to ~/tor-browser_"$TB_LANG"."
   mv ~/.tb/tor-browser_"$TB_LANG" ~/tor-browser_"$TB_LANG"
   
   local TEMP=~/tor-browser_"$TB_LANG"/
   MSG="Finished installing Tor Browser. Can be found in $TEMP."

   $output ${output_opts[@]} --progress "100"
   $output ${output_opts[@]} --channel "both" --type "info" --title "$TITLE" --message "$MSG"
   sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"
   $output ${output_opts[@]} --showx
}



tb_start_new_tab() {
   trap "tb_error_handler" ERR

   if [ ! -d ~/tor-browser_"$TB_LANG"/ ]; then
      MSG="Tor Browser is not installed?
The folder ~/tor-browser_"$TB_LANG"/ does not exist.

Please run: Start Menu -> Applications -> System -> Tor Browser Updater
            or in Terminal: $SCRIPTNAME --update"

      $output ${output_opts[@]} --progress "100"
      $output ${output_opts[@]} --channel "both" --type "error" --title "$TITLE" --message "$MSG"
      sudo -u user touch "/var/run/whonix/whonixcheck/"$IDENTIFIER"_done"
      $output ${output_opts[@]} --showx

      exit 1
   fi

   PID="$(pidof firefox)" || true

   if [ "$PID" = "" ]; then
      debug "INFO: Starting Tor Browser..."
      cd ~/tor-browser_"$TB_LANG"/
      ~/tor-browser_"$TB_LANG"/App/Firefox/firefox --profile Data/profile &
      ## Unfortunately, we must hard code the time to wait before
      ## we try open extra tabs. Just waiting for the pid to exists
      ## does not do the trick. I do not know a way to ask Firefox,
      ## if it is only partially or fully load. When trying to open
      ## a new tab before it is fully load, a popup "profile not found"
      ## will be shown, which is confusing.

      if [ "$LINK" = "" ]; then
         return
      fi
      debug "INFO: Waiting 30 seconds for Tor Browser to start..."
      sleep 30
   else
      debug "INFO: Tor Browser is already running"
   fi

   debug "INFO: Opening link..."

   #debug "tb_start_new_tab debug: ~/tor-browser_"$TB_LANG"/App/Firefox/firefox --profile Data/profile -new-tab \"$LINK\" &"

   cd ~/tor-browser_"$TB_LANG"/
   ~/tor-browser_"$TB_LANG"/App/Firefox/firefox --profile Data/profile -new-tab "$LINK" &
}



tb_start_recommend() {
   root_check
   tb_preparation

   LINK="$IMPORTANTBLOG_OFFLINE_LINK"
   debug "INFO: Link set to $LINK"
 
   if [ ! -e "$IMPORTANTBLOG_OFFLINE_FILE" ]; then
      echo "Whonix Important Blog has not been downloaded yet. It should be done, next time whonixcheck runs." > "$IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_FILE"
      LINK="$IMPORTANTBLOG_NOT_AVAILABLE_OFFLINE_LINK"
   fi
   
   tb_start_new_tab
   
   LINK="$FEATUREBLOG_OFFLINE_LINK"
   debug "INFO: Link set to $LINK"
 
   if [ ! -e "$FEATUREBLOG_OFFLINE_FILE" ]; then
      echo "Whonix Feature Blog has not been downloaded yet. It should be done, next time whonixcheck runs." > "$FEATUREBLOG_NOT_AVAILABLE_OFFLINE_FILE"
      LINK="$FEATUREBLOG_NOT_AVAILABLE_OFFLINE_LINK"
   fi 
   
   tb_start_new_tab
   
   exit 0
}  



parse_cmd_options ${1+"$@"} 
 
if [ "$TB_UPDATE" = "1" ]; then 
   root_check
   tb_preparation
   tb_update_check
   tb_download
   tb_verify
   tb_extract   
else
   tb_preparation
   tb_start_new_tab
fi

## End of Whonix /usr/bin/torbrowser
